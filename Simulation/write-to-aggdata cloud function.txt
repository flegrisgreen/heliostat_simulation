import base64
import json
import pg8000
import sqlalchemy

def write_to_aggdata(event, context):
    """Triggered from a message on a Cloud Pub/Sub topic.
    Args:
         event (dict): Event payload.
         context (google.cloud.functions.Context): Metadata for the event.
    """
    pubsub_message = base64.b64decode(event['data']).decode('utf-8')
    db = sqlalchemy.create_engine(sqlalchemy.engine.url.URL(
                                  drivername='postgres+pg8000',
                                  username='postgres',
                                  password='helio100',
                                  database='aggdata',
                                  query={'unix_sock': '/cloudsql/test-project-254608:us-central1:appdata/.s.PGSQL.5432'}))

    con = db.connect()
    
    try:
        data = dict(json.loads(pubsub_message))
        columns = []
        for item in data.keys():
            columns.append(item)
        
        values = []
        for val in data.values():
            if isinstance(val, dict):
                val = json.dumps(val)
                values.append(val)
            else:
                values.append(val)
                
        insertQ(con=con, tname=f'agg1', params=columns, vals=values)
        con.close()
    except Exception as e:
        print(e)

def insertQ(con, tname, params, vals):
    assert isinstance(tname, object)
    parameters = ", "
    parameters = parameters.join(params)

    for i in range(len(vals)):
        vals[i] = "'{}'".format(str(vals[i]))

    values = ", "
    values = values.join(vals)
    con.execute(f'INSERT INTO {tname} ({parameters}) VALUES ({values})')
    return
	
	
requirements.txt
pg8000>=1.15.2
SQLAlchemy>=1.3.16
